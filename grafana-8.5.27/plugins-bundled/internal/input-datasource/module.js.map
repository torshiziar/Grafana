{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"react\"","webpack:///external \"@grafana/data\"","webpack:///external \"@grafana/ui\"","webpack:///./utils.ts","webpack:///./InputConfigEditor.tsx","webpack:///./InputDatasource.ts","webpack:///./InputQueryEditor.tsx","webpack:///./module.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","dataFrameToCSV","dto","length","map","v","state","text","onSeriesParsed","data","options","onOptionsChange","this","props","jsonData","setState","className","width","height","instanceSettings","super","query","describeDataFrame","Promise","resolve","reject","names","series","field","fields","push","results","targets","hide","refId","rowCount","info","status","message","getLength","values","count","reduce","acc","label","description","onSourceChange","item","datasource","onChange","onRunQuery","undefined","uid","selected","labelWidth","menuShouldPortal","style","alignSelf","variant","href","setConfigEditor","setQueryEditor"],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","import { toDataFrame, DataFrameDTO, toCSV } from '@grafana/data';\n\nexport function dataFrameToCSV(dto?: DataFrameDTO[]) {\n  if (!dto || !dto.length) {\n    return '';\n  }\n  return toCSV(dto.map((v) => toDataFrame(v)));\n}\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { DataSourcePluginOptionsEditorProps, DataFrame, MutableDataFrame } from '@grafana/data';\nimport { TableInputCSV } from '@grafana/ui';\n\nimport { InputOptions } from './types';\nimport { dataFrameToCSV } from './utils';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<InputOptions> {}\n\ninterface State {\n  text: string;\n}\n\nexport class InputConfigEditor extends PureComponent<Props, State> {\n  state = {\n    text: '',\n  };\n\n  componentDidMount() {\n    const { options } = this.props;\n    if (options.jsonData.data) {\n      const text = dataFrameToCSV(options.jsonData.data);\n      this.setState({ text });\n    }\n  }\n\n  onSeriesParsed = (data: DataFrame[], text: string) => {\n    const { options, onOptionsChange } = this.props;\n    if (!data) {\n      data = [new MutableDataFrame()];\n    }\n    // data is a property on 'jsonData'\n    const jsonData = {\n      ...options.jsonData,\n      data,\n    };\n\n    onOptionsChange({\n      ...options,\n      jsonData,\n    });\n    this.setState({ text });\n  };\n\n  render() {\n    const { text } = this.state;\n    return (\n      <div>\n        <div className=\"gf-form-group\">\n          <h4>Shared Data:</h4>\n          <span>Enter CSV</span>\n          <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />\n        </div>\n\n        <div className=\"grafana-info-box\">\n          This data is stored in the datasource json and is returned to every user in the initial request for any\n          datasource. This is an appropriate place to enter a few values. Large datasets will perform better in other\n          datasources.\n          <br />\n          <br />\n          <b>NOTE:</b> Changes to this data will only be reflected after a browser refresh.\n        </div>\n      </div>\n    );\n  }\n}\n","// Types\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  DataFrame,\n  DataFrameDTO,\n  toDataFrame,\n} from '@grafana/data';\n\nimport { InputQuery, InputOptions } from './types';\n\nexport class InputDatasource extends DataSourceApi<InputQuery, InputOptions> {\n  data: DataFrame[] = [];\n\n  constructor(instanceSettings: DataSourceInstanceSettings<InputOptions>) {\n    super(instanceSettings);\n\n    if (instanceSettings.jsonData.data) {\n      this.data = instanceSettings.jsonData.data.map((v) => toDataFrame(v));\n    }\n  }\n\n  /**\n   * Convert a query to a simple text string\n   */\n  getQueryDisplayText(query: InputQuery): string {\n    if (query.data) {\n      return 'Panel Data: ' + describeDataFrame(query.data);\n    }\n    return `Shared Data From: ${this.name} (${describeDataFrame(this.data)})`;\n  }\n\n  metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    return new Promise((resolve, reject) => {\n      const names = [];\n      for (const series of this.data) {\n        for (const field of series.fields) {\n          // TODO, match query/options?\n          names.push({\n            text: field.name,\n          });\n        }\n      }\n      resolve(names);\n    });\n  }\n\n  query(options: DataQueryRequest<InputQuery>): Promise<DataQueryResponse> {\n    const results: DataFrame[] = [];\n    for (const query of options.targets) {\n      if (query.hide) {\n        continue;\n      }\n      let data = this.data;\n      if (query.data) {\n        data = query.data.map((v) => toDataFrame(v));\n      }\n      for (let i = 0; i < data.length; i++) {\n        results.push({\n          ...data[i],\n          refId: query.refId,\n        });\n      }\n    }\n    return Promise.resolve({ data: results });\n  }\n\n  testDatasource() {\n    return new Promise((resolve, reject) => {\n      let rowCount = 0;\n      let info = `${this.data.length} Series:`;\n      for (const series of this.data) {\n        const length = series.length;\n        info += ` [${series.fields.length} Fields, ${length} Rows]`;\n        rowCount += length;\n      }\n\n      if (rowCount > 0) {\n        resolve({\n          status: 'success',\n          message: info,\n        });\n      }\n      reject({\n        status: 'error',\n        message: 'No Data Entered',\n      });\n    });\n  }\n}\n\nfunction getLength(data?: DataFrameDTO | DataFrame) {\n  if (!data || !data.fields || !data.fields.length) {\n    return 0;\n  }\n  if (data.hasOwnProperty('length')) {\n    return (data as DataFrame).length;\n  }\n  return data.fields[0].values!.length;\n}\n\nexport function describeDataFrame(data: Array<DataFrameDTO | DataFrame>): string {\n  if (!data || !data.length) {\n    return '';\n  }\n  if (data.length > 1) {\n    const count = data.reduce((acc, series) => {\n      return acc + getLength(series);\n    }, 0);\n    return `${data.length} Series, ${count} Rows`;\n  }\n  const series = data[0];\n  if (!series.fields) {\n    return 'Missing Fields';\n  }\n  const length = getLength(series);\n  return `${series.fields.length} Fields, ${length} Rows`;\n}\n\nexport default InputDatasource;\n","// Libraries\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { DataFrame, toCSV, SelectableValue, MutableDataFrame, QueryEditorProps } from '@grafana/data';\nimport { Select, TableInputCSV, LinkButton, Icon, InlineField } from '@grafana/ui';\n\nimport { InputDatasource, describeDataFrame } from './InputDatasource';\nimport { InputQuery, InputOptions } from './types';\nimport { dataFrameToCSV } from './utils';\n\ntype Props = QueryEditorProps<InputDatasource, InputQuery, InputOptions>;\n\nconst options = [\n  { value: 'panel', label: 'Panel', description: 'Save data in the panel configuration.' },\n  { value: 'shared', label: 'Shared', description: 'Save data in the shared datasource object.' },\n];\n\ninterface State {\n  text: string;\n}\n\nexport class InputQueryEditor extends PureComponent<Props, State> {\n  state = {\n    text: '',\n  };\n\n  onComponentDidMount() {\n    const { query } = this.props;\n    const text = dataFrameToCSV(query.data);\n    this.setState({ text });\n  }\n\n  onSourceChange = (item: SelectableValue<string>) => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    let data: DataFrame[] | undefined = undefined;\n    if (item.value === 'panel') {\n      if (query.data) {\n        return;\n      }\n      data = [...datasource.data];\n      if (!data) {\n        data = [new MutableDataFrame()];\n      }\n      this.setState({ text: toCSV(data) });\n    }\n    onChange({ ...query, data });\n    onRunQuery();\n  };\n\n  onSeriesParsed = (data: DataFrame[], text: string) => {\n    const { query, onChange, onRunQuery } = this.props;\n    this.setState({ text });\n    if (!data) {\n      data = [new MutableDataFrame()];\n    }\n    onChange({ ...query, data });\n    onRunQuery();\n  };\n\n  render() {\n    const { datasource, query } = this.props;\n    const { uid, name } = datasource;\n    const { text } = this.state;\n\n    const selected = query.data ? options[0] : options[1];\n    return (\n      <div>\n        <InlineField label=\"Data\" labelWidth={8}>\n          <>\n            <Select menuShouldPortal width={20} options={options} value={selected} onChange={this.onSourceChange} />\n            {query.data ? (\n              <div style={{ alignSelf: 'center' }}>{describeDataFrame(query.data)}</div>\n            ) : (\n              <LinkButton variant=\"link\" href={`datasources/edit/${uid}/`}>\n                {name}: {describeDataFrame(datasource.data)} &nbsp;&nbsp;\n                <Icon name=\"pen\" />\n              </LinkButton>\n            )}\n          </>\n        </InlineField>\n        {query.data && <TableInputCSV text={text} onSeriesParsed={this.onSeriesParsed} width={'100%'} height={200} />}\n      </div>\n    );\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { InputConfigEditor } from './InputConfigEditor';\nimport { InputDatasource } from './InputDatasource';\nimport { InputQueryEditor } from './InputQueryEditor';\nimport { InputOptions, InputQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<InputDatasource, InputQuery, InputOptions>(InputDatasource)\n  .setConfigEditor(InputConfigEditor)\n  .setQueryEditor(InputQueryEditor);\n"],"sourceRoot":""}